@ifxml
@ifnotxml
@c
@c For the copyright information for this file, please search up the
@c directory tree for the first COPYING file.
@c
@end ifnotxml
@end ifxml
@ifset fullmanual
@node @w{XXXX-XX-XX}@tie{}--- SST@tie{}@w{X-X-X}
@unnumbered @w{XXXX-XX-XX}@tie{}--- SST@tie{}@w{X.@:X.@:X}
@end ifset
@ifclear fullmanual
@unnumbered @w{XXXX-XX-XX}@tie{}--- SST@tie{}@w{X.@:X.@:X}
@end ifclear

@heading Build System

@itemize
@item
Changed the build system to put the
@w{@t{sst.@:jar}}
file into the
@w{@t{lib}}
directory instead of the
@w{@t{java}}
directory@.

@item
Moved the Java source code into the
@w{@t{src}}
directory@.

@item
Added the
@w{@t{EXE_CFLAGS}}
variable to the build system, which allows extra flags to be used with
the
C@tie{}compiler
when compiling object files that will be linked into executable files@.

@item
Added the
@w{@t{EXE_LDFLAGS}}
variable to the build system, which allows extra flags to be used with
the linker when linking executable files@.

@item
Updated the
@w{@t{SST_FUN}}
and
@w{@t{SST_OBJ}}
macros to use
@w{@t{__declspec(dllexport)}}
and
@w{@t{__declspec(dllimport)}}
when the
@w{@t{_WIN32}}
and
@w{@t{DLL_EXPORT}}
macros are defined@.
This provides proper shared library compilation with Libtool and
establishes a default user convention of defining the
@w{@t{DLL_EXPORT}}
macro to indicate that the shared library is being linked to@.

@item
Updated the
@w{@t{SST_FUN}}
and
@w{@t{SST_OBJ}}
macros to be redefinable@.
This can be used when forgoing the default user convention of defining
the
@w{@t{DLL_EXPORT}}
macro to indicate that the shared library is being linked to@.

@item
Updated the
@w{@t{SST_FUN}}
and
@w{@t{SST_OBJ}}
macros to use
@w{@t{extern "C"}}
when the
@w{@t{__cplusplus}}
macro is defined, which allows the
C@tie{}headers
to be used
in@tie{}C++@.
@end itemize

@heading Status Codes

@itemize
@item
Added the
@w{@t{SST_STATUS_MAXVAL_MAXVAL}}
macro, which limits
@w{@t{SST_STATUS_MAXVAL}}
to a value that is smaller than the minimum possible value of
@w{@t{ULONG_MAX}}@.
This allows custom status codes to be used@.

@item
Added the
@w{@t{InternalErrorStatus}}
Java exception class, which corresponds to the already existing
@w{@t{SST_INTERNAL_ERROR}}
status code@.
These can be used when functions detect bugs@.

@item
Added the
@w{@t{MissingCaseStatus}}
Java exception class, which corresponds to the already existing
@w{@t{SST_MISSING_CASE}}
status code@.
These can be used when functions detect missing cases in switch
statements or any similar constructions@.

@item
Added the
@w{@t{NotImplementedStatus}}
Java exception class, which corresponds to the already existing
@w{@t{SST_NOT_IMPLEMENTED}}
status code@.
These can be used when parts of functions are not yet implemented@.

@item
Added the
@w{@t{NotSupportedStatus}}
Java exception class, which corresponds to the already existing
@w{@t{SST_NOT_SUPPORTED}}
status code@.
These can be used when parts of functions are not supported because of
system limitations or package configuration options@.

@item
Added the
@w{@t{OutOfMemoryStatus}}
Java exception class, which corresponds to the already existing
@w{@t{SST_OUT_OF_MEMORY}}
status code@.
These can be used when memory allocations fail@.

@item
Added the
@w{@t{WildPointerStatus}}
Java exception class, which corresponds to the already existing
@w{@t{SST_WILD_POINTER}}
status code@.
These can be used when nonnull pointer arguments do not appear to be
pointing to objects of appropriate types@.

@item
Added the
@w{@t{SST_ALLOCATION_FAILED}}
status code and the corresponding Java exception class
@w{(@t{AllocationFailedStatus})}@.
These can be used when memory allocations fail because the underlying
allocation requests failed@.

@item
Added the
@w{@t{SST_ALLOCATION_IMPOSSIBLE}}
status code and the corresponding Java exception class
@w{(@t{AllocationImpossibleStatus})}@.
These can be used when memory allocations fail because the sizes are too
large to make the underlying allocation requests@.

@item
Added the
@w{@t{SST_ALWAYS_FAILS}}
status code and the corresponding Java exception class
@w{(@t{AlwaysFailsStatus})}@.
These can be used by functions that always fail@.

@item
Added the
@w{@t{SST_INVALID_OPERAND}}
status code and the corresponding Java exception class
@w{(@t{InvalidOperandStatus})}@.
These can be used when
@w{@t{main}}-like
functions are given invalid command-line operands@.

@item
Added the
@w{@t{SST_INVALID_OPTION}}
status code and the corresponding Java exception class
@w{(@t{InvalidOptionStatus})}@.
These can be used when
@w{@t{main}}-like
functions are given invalid command-line options@.

@item
Added the
@w{@t{SST_INVALID_OPTION_NAME}}
status code and the corresponding Java exception class
@w{(@t{InvalidOptionNameStatus})}@.
These can be used when
@w{@t{main}}-like
functions are given command-line options with invalid names@.

@item
Added the
@w{@t{SST_INVALID_OPTION_VALUE}}
status code and the corresponding Java exception class
@w{(@t{InvalidOptionValueStatus})}@.
These can be used when
@w{@t{main}}-like
functions are given command-line options with invalid values@.

@item
Added the
@w{@t{SST_LIMIT_EXCEEDED}}
status code and the corresponding Java exception class
@w{(@t{LimitExceededStatus})}@.
These can be used when functions fail because implementation limits were
exceeded@.

@item
Added the
@w{@t{SST_LONGPTR_NOT_SUPPORTED}}
status code and the corresponding Java exception class
@w{(@t{LongptrNotSupportedStatus})}@.
These can be used when functions are not supported because native
pointers cannot be represented by the
@w{@t{long}}
Java type@.

@item
Added the
@w{@t{SST_MISSING_OPTION_VALUE}}
status code and the corresponding Java exception class
@w{(@t{MissingOptionValueStatus})}@.
These can be used when
@w{@t{main}}-like
functions are given command-line options that require but are missing
values@.

@item
Added the
@w{@t{SST_PARSE_FAILURE}}
status code and the corresponding Java exception class
@w{(@t{ParseFailureStatus})}@.
These can be used when parsers are given invalid input@.

@item
Added the
@w{@t{SST_ZERO_ARRAY_INDEX}}
status code and the corresponding Java exception class
@w{(@t{ZeroArrayIndexStatus})}@.
These can be used when working with arrays that use one-based indexing@.

@item
Added the
@w{@t{SST_ZERO_LIST_INDEX}}
status code and the corresponding Java exception class
@w{(@t{ZeroListIndexStatus})}@.
These can be used when working with ordered collections that use
one-based indexing@.
@end itemize

@heading Miscellaneous

@itemize
@item
Updated the documentation for all Java exception constructors to specify
that the causes are uninitialized@.

@item
Initialized the causes of all thrown Java exceptions@.

@item
Added the
@w{@t{sst_InitCause}}
function, which can be used by native code to initialize the cause of a
Java object of class
@w{@t{Throwable}}
or any subclass thereof@.

@item
Added the
@w{@t{sst_ThrowNew}}
function, which can be used by native code to create, initialize the
cause of, and throw a Java object of class
@w{@t{Throwable}}
or any subclass thereof@.

@item
Added the
@w{@t{sst_FillByteArrayRegion}}
function, which can be used by native code to fill a region of a Java
@w{@t{byte}}
array with a given value@.

@item
Updated the
@w{@t{sst_status_value}}
function to use binary search instead of linear search@.

@item
Updated the
@w{@t{sst_status_ec}}
function to actually return the appropriate Java exception class names@.
Prior to this version, this function would simply return
@w{@t{"java/lang/RuntimeException"}}
as a placeholder@.

@item
Continued working on the documentation@.
This includes a large number of changes that are not detailed here, as
the documentation is still stabilizing and will continue to undergo a
large number of changes during this process@.

@item
Started using Doxygen@.

@item
Split the
@w{@t{SST_EC.@:h}}
header into individual headers@.

@item
Split the
@w{@t{sst_bool.@:h}}
header into individual headers@.

@item
Split the
@w{@t{sst_status.@:h}}
header into individual headers@.

@item
Added the
@w{@t{sst_wall_time_null}}
type and its associated functions@.

@item
Added the
@w{@t{sst_wall_time_CLOCK_MONOTONIC}}
type and its associated functions@.

@item
Added the
@w{@t{Longptr}}
Java class, which provides information about using the
@w{@t{long}}
Java type to represent native pointers@.

@item
Started using the WFICMP package for unavoidable comparisons between
nonnegative integers whose types differ in signedness@.

@item
Added the
@w{@t{sst_strchr}}
function@.

@item
Changed the
@w{@t{sst_tchar}}
type into a type-selecting macro to make it more consistent with the
corresponding function-selecting macros@.

@item
Updated the C code to use the individual SST headers instead of the
collective
@w{@t{sst.@:h}}
header@.

@item
Fixed a bug in the
@w{@t{sst_pull_option_a}}
function where the
@w{@t{memmove}}
function was sometimes being called to copy zero bytes to one past the
end of a maximal object, which arguably causes undefined behavior@.

@item
Fixed several bugs in the
@w{@t{sst_pull_option_a}}
function where the behavior was sometimes undefined if an array was so
large that it could not be accomodated by the
@w{@t{size_t}}
type, which is arguably permitted by the C language@.

@item
Fixed a bug in the
@w{@t{pullOption}}
method of the
@w{@t{Args}}
Java class where the null sentinel and any subsequent elements of the
@w{@t{otrv}}
array were being considered@.

@item
Updated the
@w{@t{pullOption}}
method of the
@w{@t{Args}}
Java class to permit the
@w{@t{otrv}}
and
@w{@t{otp}}
arrays to not have null sentinels@.

@item
Added several convenience overloads to the
@w{@t{Args}}
Java class@.

@item
Changed the
@w{@t{addNull}}
method of the
@w{@t{Args}}
Java class to implicitly adjust a null reference to an empty array
instead of throwing a
@w{@t{NullPointerStatus}}
exception@.

@item
Added the
@w{@t{wchar_t}}
variants of the options parsing functions@.

@item
Added variants to the
@w{@t{sst_pull_option}}
function family and the
@w{@t{pullOption}}
method family of the
@w{@t{Args}}
Java class for long and short options@.

@item
Added the
@w{@t{needNull}}
method to the
@w{@t{Args}}
Java class, which is useful alongside the
@w{@t{addNull}}
method of the same class@.

@item
Added the
@w{@t{NullInputStream}}
and
@w{@t{NullOutputStream}}
Java classes@.

@item
Added the
@w{@t{Memory}}
Java class, which provides various static methods for working with
memory@.

@item
Added the
@w{@t{Rand}}
Java class, which provides various static methods for random number
generation@.

@item
Added the
@w{@t{Uris}}
Java class, which provides various static methods for working with
URIs@.

@item
Added the
@w{@t{Json}}
Java class, which provides various static methods for working with
JSON@.
@end itemize
